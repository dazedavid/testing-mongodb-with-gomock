//+build unit

package users

import (
	"reflect"
	"testing"

	"github.com/golang/mock/gomock"
)

func TestAddUser(t *testing.T) {
	t.Parallel()
	ctrl := gomock.NewController(t)
	mockRepo := NewMockRepository(ctrl)

	s := New()
	s.SetRepo(mockRepo)
	u := User{"jack", 23}
	mockRepo.EXPECT().AddUser(User{"jack", 23})
	if err := s.AddUser(u); err != nil {
		t.Fatalf("add user failed unexpectedly, err: %v", err)
	}
}

func TestGetUserEmptyResponse(t *testing.T) {
	t.Parallel()
	ctrl := gomock.NewController(t)
	mockRepo := NewMockRepository(ctrl)

	mockRepo.EXPECT().GetUsers().Return([]*User{}, nil)

	s := New()
	s.SetRepo(mockRepo)

	_, err := s.GetUsers()
	if err == nil {
		t.Fatalf("Test case 'get user with empty response' failed, got %s, want %s", err, ErrNotFound)
	}
	if err != ErrNotFound {
		t.Fatalf("Test case 'get user with empty response' failed, got %v, want %s", err, ErrNotFound)
	}
}

func TestGetUserNonEmptyResponse(t *testing.T) {
	t.Parallel()
	ctrl := gomock.NewController(t)
	mockRepo := NewMockRepository(ctrl)

	mockRepo.EXPECT().GetUsers().Return([]*User{&User{"thanh", 22}}, nil)

	s := New()
	s.SetRepo(mockRepo)

	users, err := s.GetUsers()
	if err != nil {
		t.Fatalf("Test case 'get user with non empty response' failed, got err %v, want %s", err, "nil")
	}
	if len(users) < 1 {
		t.Fatalf("Test case 'get user with non empty response' failed, got len=%v, want len=1", len(users))
	}

}

// The code below this line is generated by go mock by invoking this command:
// mockgen -source=srv.go
// See more at: https://github.com/golang/mock

// MockRepository is a mock of Repository interface
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (_m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return _m.recorder
}

// GetUsers mocks base method
func (_m *MockRepository) GetUsers() ([]*User, error) {
	ret := _m.ctrl.Call(_m, "GetUsers")
	ret0, _ := ret[0].([]*User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers
func (_mr *MockRepositoryMockRecorder) GetUsers() *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "GetUsers", reflect.TypeOf((*MockRepository)(nil).GetUsers))
}

// AddUser mocks base method
func (_m *MockRepository) AddUser(u User) error {
	ret := _m.ctrl.Call(_m, "AddUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser
func (_mr *MockRepositoryMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCallWithMethodType(_mr.mock, "AddUser", reflect.TypeOf((*MockRepository)(nil).AddUser), arg0)
}
